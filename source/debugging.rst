Отладка
=========

Compile-time ошибки
-------------------

Так как D обширный язык,
вы будете частенько получать ошибки от компилятора.
Поясню некоторые из них.

Error: T is used as a type
^^^^^^^^^^^^^^^^^^^^^^^^^^

Здесь T не является типом, но пытается его так использовать.
Шаблон не есть тип.
Вероятно вы должны применить T вроде `T!int`, чтобы исправить ошибку.

Run-time ошибки
---------------

Run-time ошибки возникают когда скомпилированная программа,
ведет себя как не задумывалось.

Stack-traces
^^^^^^^^^^^^

В D есть исключения от которых можно получить
stack trace если они не обработаны.
Конечно, будучи системным языком,
вы можете сломать систему типов, что приведет к тихому падению,
но большая часть языка безопасна и вы получите подробное сообщение об ошибке.


Printf отладка
^^^^^^^^^^^^^^^^

Самый простой способ отладки, это расставить
команды с сообщениями повсюду в коде.
В C это называют "printf отладкой", а в
D называют "writeln отладкой".

Существует ключевое слово ``debug`` вместе с опцией ``-debug`` компилятора.
С ней вы можете отключать печатающие команды, не удаляя при этом их из кода.
Рассмотрим следующий кусок кода.


.. code-block:: d

   writeln("Hello");
   debug writeln("World");

Если скомпилировать без ``-debug``,
получите только "Hello".
Однако с ``-debug`` вы также получите "World".

.. warning::

   Не оставляйте важный код в дебаг версии, так
   как в релизную версию он не попадает.

Полезно (и местами необходимо) использовать ``text`` функцию
из `std.conv <http://dlang.org/phobos/std_conv.html>`_,
которая переводит все что угода в строку.

Журналирование
^^^^^^^^^^^^^^

К сожалению в стандартной библиотеке пока нет модуля для логирования.

Отладчик
^^^^^^^^

У dmd компилятора есть опция ``-g``,
которая разрешает использовать gdb или любой другой отладчик.
Отладчик может узнать об именах, значениях переменных и т. д.

.. seealso::

   `Wiki: Debuggers <http://wiki.dlang.org/Debuggers>`_
