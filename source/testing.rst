.. _testing:

Тестирование кода
=================

В D есть ключевое слово ``unittest``,
которое позволяет писать тесты к функциям
прямо рядом функциями.


.. literalinclude:: ../examplecode/unittestexample.d
   :language: d


По умолчанию эти куски кода игнорируются.
Если в dmd задать ``-unittest``, они скомпилируются и запустяться
перед ``main``.

   "Кому нужны юнитесты", - спрашивал я себя,
   "если я настолько умен чтобы написать код один раз, и больше не заглядывать туда?"
   Но они просто смотрели на меня и как бы говорили: "эй мы тут, используй нас!" до тех пор
   пока я не пристыдился и написал парочку. И тут я открыл для себя, что я не гений, я понял что мой код
   полон багов, опечаток и всех видов ошибок, которые только могут быть, конечно же я не был в состоянии
   проверять все вручную.
   -- `H. S. Teoh <http://forum.dlang.org/thread/CAJ85NXAu+fKDeq22-=Bjc0jn5KPni5-dpg1EDWA3MqJwKFk+hg@mail.gmail.com#post-mailman.1371.1371919343.13711.digitalmars-d:40puremagic.com>`_


Другой полезный аргумент для тестирования библиотек в dmd это ``-main``. Он
вставляет пустую мейн функцию в программу, которая необходима для выполнения и
запуска юниттестов перед ней.

Старайтесь не использовать шаблоны в юниттестах, так как они
могут применяться по несколько раз, что может привести
к непредвиденным проблемам.

Покрытие тестами
----------------

Другой способ тестирования  - это покрытие,
и  в dmd есть опция ``-cov``.
Для программы ниже, следующий файл генерируется в юниттесте:

.. code-block:: txt

       |/** @returns the argument times two */
      2|int twice(int x) { return x+x; }
       |
       |/** for example */
       |unittest {
      1|  assert (twice(-1) == -2);
      1|  assert (twice(2) == 4);
       |}
    examplecode/unittestexample.d is 100% covered

В непрерывном тестировании, можно использовать ``-cov`` для
минимального покрытия тестами.

Дополнительное тестирование
---------------------------

Несмотря на то что в D встроены юниттесты, вам могут понадобиться продвинутые техники вроде
mockups, setup, или teardown routines.
Есть несколько фреймворков для этого.

.. seealso::

   `DUnit <https://github.com/nomad-software/dunit>`_,
   `Unit-threaded <https://github.com/atilaneves/unit-threaded>`_
