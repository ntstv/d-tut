Остальные языки программирования
================================

Считается что вы уже умеете программировать,
т.е пришли в D из другого языка.

C программисту
-----------------

В D вместо препроцессора используется более продвинутый механизм,
под названием мета программирование.
Почти весь C код компилируется в D, некоторые даже используют
D в качестве классного C компилятора.

  Я пишу свой C код на DMD.
  После отладки и настройки в D, я собираю финальную версию в C компиляторе.
  – `ed <http://forum.dlang.org/post/ibnfbsvxqzjxyfpnzseh@forum.dlang.org>`_


Стоит отметить, что D добавляет множество вещей, которы не определены (или не
возможны, трудно реализуемы) в C. Например, обертку для переполнения int'ов
(integer wraparound), что сейчас практически любая архитектура умеет.

Почему вы должны предпочти D? Мета программирование в D добавляет
высокоуровневые абстракции, а значит уменьшает размер исходного кода. В D
гораздо меньше подводных камней, улучшенная и более безопасная типизация, мало
непредвиденного поведения и автоматическое управление памятью.

Java программисту
--------------------

В D есть классы, интерфейсы, модули, пакеты и встроенный сборщик мусора.
В D вы освоитесь очень быстро и почувствуете себя как дома. 
Вместо Java шаблонов есть D шаблоны.
 
Почему вы должны предпочти D? Мета программирование в D добавляет
высокоуровневые абстракции, а значит уменьшает размер исходного кода. Для
чувствительных к ЦПУ или к памяти задач, когда они являются узким местом в
системе, D дает куда больше контроля и свободы действий для оптимизации.


C++ программисту
-------------------

Вы определенно почувствуете себя тут как дома.
Если вас впечатляют нововведения C++11,
вы будете в восторге от D.
В D даже есть то, чего нет в C++11.
Однако, придется привыкнуть к немного другому синтаксису.
D не обременен полной C подобной совместимостью.
Но можно линковать С и С++ библиотеки, после портирования
хэдеров.

Почему вы должны предпочти D? В D меньший наследственный мусор. Имеет меньше
подводных камней и безопаснее, благодаря предсказуемому поведению и
автоматическому управлению памятью.

C# программисту
------------------

Все очень похоже но немного другое.
Почувствуете себя как дома, после того как привыкните тому,что сходные вещи делаются
немного по другому.
Вместо расширения синтаксиса, типа LINQ,
D предоставляет множество сходных механизмов из стандартной библиотеки.
Вместо ``using``, в D есть разграничение областей видимости.

Почему вы должны предпочти D? D не нужна виртуальная машина,
поэтому он годится для встраиваемых задач.

Node.js программисту
-----------------------

Синтаксически D и JS родственники.
Интересно, что JS ``function`` это ``delegate`` в D.
В D статическая типизация с минимальными стереотипами.
Вот `Rosettacode пример <http://rosettacode.org/wiki/Look-and-say_sequence#D>`_,
показывающий, что D программы могут быть короткими и ясными, или высоко оптимизированными.

Почему вы должны предпочти D?
В задачах, где ЦПУ узкое место, D дает куда больше контроля и свободы действий для оптимизации.
Присмотритесь к `Vibe.d <http://vibed.org/>`_
"для создания простых, масштабируемых сетевых приложений."
Этот фреймворк
"лекговесный и эффективный, идеально подходит для насыщенных данными приложений, работающими на распределенных устройствах".

Clojure программисту
-----------------------

D и Lisp совсем разные, однако
мета программирование D равноценно по силе и простоте макросам в Lisp.
D поддерживает ``immutable`` типы данных, также стандартная библиотека немного
скуднее.
D компилируется в бинарный код, для которого не нужна виртуальная машина.

Почему вы должны предпочти D?
В задачах, где ЦПУ узкое место, D дает куда больше контроля и свободы действий для оптимизации.
Богатый синтаксис D должен быть интуитивно понятен в сравнении с Lisp.

Scala программисту
---------------------

Как и Scala,
D мульти-парадигменный язык и сочетает объектно-ориентированный подход с функциональным.
Можно легко "создавать элегантную иерархию классов с максимальным повторным использованием кода и расширяемостью, а их поведение
определять с помощью высоко-уровневых функций".

Почему вы должны предпочти D?
В задачах, где ЦПУ узкое место, D дает куда больше контроля и свободы действий для оптимизации.
Компиляции в D в разы быстрее (особенно на Linux) и скорость проверки тестов кода важна для продуктивности.

Go программисту
------------------

Как и Go,
D нативно компилируемый.
Однако в D гораздо шире `набор возможностей <http://dlang.org/comparison.html>`_.
Где Go ограничивает вас тщательно подобранным выбором функций,
D предоставляет все, вплоть до низкоуровневых строительных блоков.
``goroutine`` в D называются `fiber <http://dlang.org/phobos/core_thread.html#.Fiber>`_,
и `Vibe.d <http://vibed.org/>`_ прекрасный фреймворк основанный на них.
Кроме того,
Go потоки можно построить, используя примитивы из
`std.concurrency <http://dlang.org/phobos/std_concurrency.html>`_.
Структурную типизацию Go интерфейсов можно повторить с помощью
`wrap and unwrap <http://dlang.org/phobos/std_typecons.html#.wrap>`_
из стандартной библиотеки D.

Почему вы должны предпочти D?
D поддерживает шаблонное программирование, что значит
меньше когда и больше безопасности типов.
D предоставляет больший набор инструментов для каждой задачи.
Компиляция в D быстрее чем в Go.

Python-Ruby-Perl-Javascript-Lua программисту
--------------------------------------------

D статически типизированный язык,
что займет некоторое время для привыкания.
Однако D действительно уменьшает необходимость ручного задания типов.
Объявите переменные с ``auto`` или ``const``.

.. code-block:: d

   auto x = 42;
   const y = "yes";

Также существует `Variant <http://dlang.org/phobos/std_variant.html>`_,
в который можно положить любую переменную.

Стандартная библиотека D стремится быть как можно более готовой к использованию.
К сожалению D не так развит как Python.
Не исключено, что D будет таким же лаконичным, но зачастую не хватает библиотек
для небольших рабочих сценариев.
Вы всегда можете использовать C/C++ библиотеки, но вы не будете испытывать чувство
готовности к использованию, всегда придется немного доделывать.